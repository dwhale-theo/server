buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'cz.habarta.typescript-generator', name: 'typescript-generator-gradle-plugin', version: '3.2.1263'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.7'
    id 'io.spring.dependency-management' version '1.1.5'
}

apply plugin: 'cz.habarta.typescript-generator'

generateTypeScript {
    jsonLibrary = 'jackson2'
    classPatterns = [
            'dwhale.demo.dto.**'
    ]
    excludeClassPatterns = [
            'dwhale.demo.dto.**$*Builder',
            'dwhale.demo.dto.**$*BuilderImpl'
    ]
    outputFile = 'build/dto.ts'  // 실행 가능한 TypeScript 코드 파일
    outputKind = 'global'
    outputFileType = cz.habarta.typescript.generator.TypeScriptFileType.implementationFile
    optionalProperties = 'useSpecifiedAnnotations'
    optionalPropertiesDeclaration = 'nullableType'
    optionalAnnotations = [
            'javax.annotation.Nullable'
    ]
    noFileComment = true
}

tasks.register("generateDto") {
    dependsOn("generateTypeScript")
    doLast {
        copy {
            from file('build/dto.ts')
            into file('build/dto')
            filter { String line ->
                line.startsWith('interface') || line.startsWith('type') ? "export " + line : line
            }

        }
    }
}


group = 'dwhale'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}
